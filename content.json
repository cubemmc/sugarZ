[{"title":"JS中对于时间以及时间戳的各种操作","date":"2019-09-16T16:00:00.000Z","path":"/posts/6f949845/","text":"项目开发中，有时需要将服务端返回的时间数据格式化，服务端返回的时间格式不同，前端对时间的操作方法也不一样。以下是我在项目开发中遇到的一些对时间进行相关操作的总结。 时间戳 -&gt; 当前时间时间戳 -&gt; 当前时间(形如’2018-12-28 17:41:22’) 时间戳为10位(精确到秒)，需*1000；时间戳为13位(精确到毫秒)，无需乘1000。 假设前端同学获取到的时间戳是let time = 1545990082242，然后调用函数toTimeDate(time)，返回当前时间。toTimeDate 函数具体实现方法如下： let time = 1545990082242; console.log(toTimeDate(time)); // 输出 2018-12-28 17:41:22 function toTimeDate(timetamp) { var date = new Date(timetamp); // 输出 date=Fri Dec 28 2018 17:41:22 GMT+0800 (中国标准时间) var year = date.getFullYear(); // 输出年 2018 var month = date.getMonth()+1; // 输出月 12 var dates = date.getDate(); // 输出日 28 var hour = date.getHours(); // 输出时 17 var minute = date.getMinutes(); // 输出分 41 var second = date.getSeconds(); // 输出秒 22 return `${year}-${month}-${dates} ${hour}:${minute}:${second}`; }当前时间 -&gt; 时间戳当前时间(形如’2018-12-28 17:41:22’) -&gt; 时间戳 安卓系统中，-或者/符号都可以；iOS系统，只能识别/符号。 具体实现方法如下： var date = new Date('2018-11-28 17:41:22'); // 输出date= Fri Dec 28 2018 17:41:22 GMT+0800 (中国标准时间) // 有三种方案获取时间戳 var time1 = date.getTime()； // 方案一：精确到毫秒，输出 1545990082123 var time2 = date.valueOf()； // 方案二：精确到毫秒，输出 1545990082123 var time3 = Date.parse(date)； // 方案三：精确到秒，输出 1545990082000国际标准时间 -&gt; 时间戳国际标准时间(形如’2019-03-15T09:15:32.473Z’) -&gt; 时间戳 获取当前时间的前/后一天实现方法如下： let curDate = new Date(); // Tue Sep 17 2019 13:55:11 GMT+0800 (中国标准时间) // 当前时间的前一天 let preDate = new Date(curDate.getTime() - 24 * 60 * 60 * 1000); // Mon Sep 16 2019 13:55:11 GMT+0800 (中国标准时间) // 当前时间的后一天 let nextDate = new Date(curDate.getTime() + 24 * 60 * 60 * 1000); // Wed Sep 18 2019 13:55:11 GMT+0800 (中国标准时间)获取具体某月的天数通过Date对象可以获取到具体某月的天数是多少，而且不需要判断年份是否是闰年。实现方法如下： let dt = new Date(2015, 2, 0); let monthDate = dt.getDate(); console.log(monthDate); // 28其中Date对象里的三个参数一次表示 某年、某月、0。Date对象的月份是从0开始的，也就是说1月份用0表示，所以上述的0就表示为3月份的第0天，但是JS中日期的范围是1～31，所以当日期设为0时，会向前一天，也就是上个月的最后一天。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://cubemmc.github.io/sugarZ/tags/Javascript/"},{"name":"date","slug":"date","permalink":"https://cubemmc.github.io/sugarZ/tags/date/"}]},{"title":"Regex 正则表达式基础知识总结","date":"2019-09-04T16:00:00.000Z","path":"/posts/b8a0c513/","text":"最近在一个项目开发中，被正则表达式折腾的头疼，所以最近忙里偷闲，针对正则的基础语法和常用正则表达式进行了一次总结，避免自己遗忘。 什么是正则表达式？&nbsp;&nbsp;&nbsp;&nbsp;正则表达式(Regular Expression)是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式包含普通字符（例如，a到z之间的字母）和特殊字符（称为”元字符”）,通常被用来检索、替换那些符合某个模式(规则)的文本。 正则表达式的用途是什么？正则表达式的用途有两种，一个是搜索字符串，一个是替换字符串。 正则表达式的元字符常用的元字符 字符 描述 ^ 匹配输入字符串的开始位置。 $ 匹配输入字符串的结束位置。 * 匹配前面的 子表达式 零次或多次。 + 匹配前面的 子表达式 一次或多次。 ? 匹配前面的 子表达式 零次或一次。 {n} 首先n是一个非负整数&gt;=0，表示前面的字符/字符串 有n个，这是一个确定的值，不是范围！ {n,} 首先n是一个非负整数&gt;=0，表示前面的字符/字符串 至少有n个，这是一个范围！ {n,m} 首先n和m均为非负整数&gt;=0，且n &lt;= m，表示前面的字符/字符串 至少有n个，至多有m个，这是一个范围！ x y [] 单个字符的集合范围。 [^xyz] 匹配未包含的任意字符。例如，[^abc] 可以匹配”plain”中的’p’、’l’、’i’、’n’。 \\b 匹配一个单词边界，即该元字符代表的位置必须是字符串的边界。 \\B 匹配一个非单词边界，同上面的相反。 \\d 匹配数字字符，等价于[0-9]。 \\D 匹配非数字字符，等价于[^0-9]。 \\n 匹配换行符，等价于 \\x0a 和 \\cJ。 \\r 匹配回车符，等价于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等等，等价于 [ \\f\\n\\r\\t\\v]。 \\w 匹配字母、数字、下划线。等价于 [A-Za-z0-9_]。 如果想要了解更多正则表达式的元字符，可自行前往菜鸟教程查看。 特殊字符特殊字符如果需要单独使用，需要在前面加上转义字符\\。需要转义的特殊字符有以下几个：$、(、)、*、+、.、[、?、\\、^、{、|。 限定符限定符包含：*、+、?、{n}、{n,}、{n,m}。 定位符定位符包含：^、$、\\b、\\B。 正则表达式的使用注意事项运算符的优先级运算符优先级从高到低：\\ &gt; () [] &gt; 限定符 &gt; ^ $ \\任何元字符 任何字符 &gt; | 其他注意事项&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD暂无 8736f6a8392ebef6f562f3b86d434bf7604e54e0 正则表达式在线测试工具推荐菜鸟的正则表达式在线测试工具 常用的正则表达式&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 中文字符 [\\u4e00-\\u9fa5] 中文字符 [\\u4e00-\\u9fa5] 8736f6a8392ebef6f562f3b86d434bf7604e54e0 table th:nth-of-type(1){ width: 20%; } table th:nth-of-type(2){ width: 80%; } table tr td:nth-of-type(1){ text-align: center; } table tr td:nth-of-type(2){ text-align: left; } document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"语法","slug":"语法","permalink":"https://cubemmc.github.io/sugarZ/tags/语法/"},{"name":"Regex","slug":"Regex","permalink":"https://cubemmc.github.io/sugarZ/tags/Regex/"}]},{"title":"你不知道的css小知识","date":"2019-08-30T08:34:51.000Z","path":"/posts/a6497cb5/","text":"你不知道的css小知识。 本文章总结了一些常用或者不常用的css技巧知识，并且将会持续更新。 图片点击穿透&nbsp;&nbsp;&nbsp;一张图片覆盖在了另一张图片上，需要穿透上面的图片，实现底层图片的点击事件，可以在上层图片的样式中添加样式pointer-events: none;,可以实现这个效果。该css属性在大多数浏览器下都可用，通用性比较强，具体可参考下图（图片来源于canIuse网站查询）： 英文单词换行&nbsp;&nbsp;&nbsp;可以设置文本的样式为word-break:break-all，来实现英文单词换行的效果，且不管是什么字符，都是本行放不下就直接换行。该css属性在国内浏览器都可使用，只要浏览器内核版本不是特别低，都是可用的，所以放心大胆的用吧。 white-spacewhite-space包含以下五种属性： normal：默认属性，合并空白字符和换行符。意思就是看见连续的空格或回车，一律处理成单个空格。 pre：空格字符不合并，并且内容只有在有换行符的地方换行，也就是自动换行的能力消失。 nowrap：和normal一样会合并空白字符，但不允许文本换行。 pre-wrap：空白字符不合并，并且内容会在有换行符的地方换行，也支持自动换行。 pre-line：空白字符合并，内容支持自动换行和手动换行。 不可思议的纯css滚动进度条效果利用线性渐变来实现css的滚动条效果，来源于纯css滚动进度条的实现[作者：chokcoco] 如何设置文本两端对齐？实现效果如下： 具体实现方法可查看：文本两端对齐 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"css","slug":"css","permalink":"https://cubemmc.github.io/sugarZ/tags/css/"}]},{"title":"git - 基础命令清单","date":"2019-08-29T16:00:00.000Z","path":"/posts/e930fae2/","text":"常用的git基础命令清单总结。 参考：阮一峰网络日志 新建代码库在当前目录新建一个Git代码库git init 新建一个目录，将其初始化为Git代码库git init [project-name] 下载一个项目和它的整个代码历史git clone [url] 提交代码到远程仓库的流程添加当前目录的所有文件到暂存区git add . 提交暂存区到仓库区git commit -m [提交信息] 拉取远程仓库到本地代码库git pull [远程仓库名] [分支名] 提交暂存区到远程仓库git push [远程仓库名] [分支名] 分支列出所有本地分支git branch 列出所有远程分支git branch -r 列出所有本地分支和远程分支git branch -a 新建一个分支，但依然停留在当前分支git branch [branch-name] 新建一个分支，并切换到该分支git checkout -b [branch] 切换到指定分支，并更新工作区git checkout [branch-name] 切换到上一个分支git checkout - 新建一个分支，指向指定commitgit branch [branch] [commit] 新建一个分支，与指定的远程分支建立追踪关系git branch --track [branch] [remote-branch] 合并指定分支到当前分支git merge [branch] 选择一个commit，合并进当前分支git cherry-pick [commit] 删除分支git branch -d [branch-name] 删除远程分支git push origin --delete [branch-name]git branch -dr [remote/branch] 查看信息显示有变更的文件git status 显示当前分支的版本历史git log 显示过去5次提交git log -5 --pretty --oneline 显示指定文件是什么人在什么时间修改过git blame [file] 远程仓库显示所有远程仓库git remote -v 增加一个新的远程仓库，并命名git remote add [远程仓库命名] [远程仓库url] document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"语法","slug":"语法","permalink":"https://cubemmc.github.io/sugarZ/tags/语法/"},{"name":"git","slug":"git","permalink":"https://cubemmc.github.io/sugarZ/tags/git/"}]},{"title":"初识Hexo","date":"2019-08-27T16:00:00.000Z","path":"/posts/97bd5563/","text":"hexo的学习历程中，学习到的hexo语法以及一些技巧。 最近在学习利用hexo来搭建个人博客，把学习过程中遇到的问题以及学习到的语法进行来总结，希望可以帮到其他小伙伴们。 新增post文章页面命令行输入：hexo new [layout] &lt;title&gt;。其中，layout指文章页面的布局，默认为post，可不输入。PS：可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。title指文章的标题，默认文件名称就是标题的名称。 标签插件标签插件估计是最常用的一个语法，它是用于在文章中快速插入特定内容的插件，跟markdown语法中类似。 引用块 - blockquote/endblockquote语法如下： {% blockquote [作者[, 其他资源信息]] [链接] [链接标题] %} 展示内容 {% endblockquote %}示例： {% blockquote sugarZ, 程序圆 http://localhost:4000/sugarZ/2019/08/27/first-realize/ sugarZ的博客 %} 展示内容 {% endblockquote %}展示内容 sugarZ, 程序圆sugarZ的博客 代码块 - codeblock/endcodeblock语法如下： {% codeblock [标题] [lang:language] [链接] [链接title] %} code snippet {% endcodeblock %}代码块的语法除了hexo特有的这种，还有就是markdown中的反引号语法，效果一样，反引号语法如下： ``` [language] [title] [url] [link text] code snippet ```示例： {% codeblock %} alert('Hello World!') {% endcodeblock %} Pull Quote语法： {% pullquote [class] %} content {% endpullquote %}示例： content 插入图片 - Image在文章中插入图片，可自定义图片宽高，语法： {% img [class names] /path/to/image [width] [height] \"title text 'alt text'\" %}示例： {% img /path/to/image 100 20 \"ceshi\" %} 文章中插入链接 - Link在文章中插入链接，并自动给外部链接添加target=\"_blank\"属性，语法： {% link 链接文案 链接url [external] [title] %}示例： text 实现段落文本缩进可以在需要缩进的段落文本前添加&amp;nbsp;&amp;nbsp;&amp;nbsp;，来实现段落文本的缩进。每一个&amp;nbsp;代表一个空格的距离。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","tags":[{"name":"hexo","slug":"hexo","permalink":"https://cubemmc.github.io/sugarZ/tags/hexo/"},{"name":"语法","slug":"语法","permalink":"https://cubemmc.github.io/sugarZ/tags/语法/"}]}]